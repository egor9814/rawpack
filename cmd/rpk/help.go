package main

import (
	"fmt"
	"os"
	"path/filepath"
)

func help() {
	exe := filepath.Base(os.Args[0])
	fmt.Printf("%s: manipulate rawpack archive format\n", exe)
	fmt.Printf("usage: %s [options...] [pattern...]\n", exe)
	fmt.Println("options:")
	fmt.Println("  -l, --list                 list archive")
	fmt.Println("  -c, --create               create archive")
	fmt.Println("  -x, --extract              extract archive")
	fmt.Println("  -f, --file <name>          set output name")
	fmt.Println("  -d, --dir <dir>            change dir")
	fmt.Println("  -e, --exclude <pattern>    exclude files")
	fmt.Println("      --zstd=<zstd_options>  apply ZSTD compression")
	fmt.Println("  -v, --verbose              verbose mode")
	fmt.Println("  -V, --version              show version")
	fmt.Println("  -h, --help                 show help")
	fmt.Println()
	fmt.Println("pattern: {term}+")
	fmt.Println("  term: [*?{c}]")
	fmt.Println("  *: any printable characters")
	fmt.Println("  ?: any one printable character")
	fmt.Println("  c: specified printable character <c>")
	fmt.Println()
	fmt.Println("pattern example:")
	fmt.Println("  *.go")
	fmt.Println("  file-?.txt")
	fmt.Println()
	fmt.Println("list archive example:")
	fmt.Printf("  %s -lvf test.rpk\n", exe)
	fmt.Println("    show files in archive 'test.rpk'")
	fmt.Println()
	fmt.Println("create archive example:")
	fmt.Printf("  %s -cvfe test.rpk *.txt\n", exe)
	fmt.Println("    create archive 'test.rpk', with all files in current directory")
	fmt.Println("    without all '.txt' files")
	fmt.Printf("  %s -cvfd test.rpk docs\n", exe)
	fmt.Println("    create archive 'test.rpk', with all files in directory 'docs'")
	fmt.Printf("  %s -cvfe test.rpk main.go *.go\n", exe)
	fmt.Println("    create archive 'test.rpk', with all '.go' files in current directory")
	fmt.Println("    without 'main.go' files")
	fmt.Println()
	fmt.Println("extract archive example:")
	fmt.Printf("  %s -xvf test.rpk\n", exe)
	fmt.Println("    extract files from archive 'test.rpk'")
	fmt.Printf("  %s -xvfd test.rpk tmp\n", exe)
	fmt.Println("    extract files from archive 'test.rpk' to directory 'tmp'")
	fmt.Println()
	fmt.Println("zstd_options: {zstd_option}(,{zstd_option})+")
	fmt.Println("zstd_option: [(l={zstd_compression_level})")
	fmt.Println("              (t={zstd_threads_count})")
	fmt.Println("              (m={zstd_memory_limit})(auto)]")
	fmt.Println("zstd_compression_level: [(low)(mid)(high)] (default: mid)")
	fmt.Println("zstd_threads_count: {digit}+ (default: 1) (0 means all cpu count)")
	fmt.Println("zstd_memory_limit: {digit}+[GMKB%] (default: 1M)")
	fmt.Println()
	fmt.Println("zstd_options example:")
	fmt.Printf("  %s -cvf test.rpk.zst --zstd=t=4\n", exe)
	fmt.Println("    create archive 'test.rpk.zst', with ZSTD compression on 4 threads")
	fmt.Printf("  %s -cvf test.rpk.zst --zstd=auto\n", exe)
	fmt.Println("    or")
	fmt.Printf("  %s -cvf test.rpk.zst --zstd\n", exe)
	fmt.Println("    create archive 'test.rpk.zst', with ZSTD compression with auto")
	fmt.Println("    parameters detection (compressopn level, thread count, block size)")
	fmt.Printf("  %s -xvf test.rpk.zst --zstd\n", exe)
	fmt.Println("    unpack archive 'test.rpk.zst', with ZSTD (auto parameters)")
	fmt.Printf("  %s -xvf test.rpk.zst\n", exe)
	fmt.Println("    unpack archive 'test.rpk.zst', and maybe as ZSTD archive")
	os.Exit(0)
}
